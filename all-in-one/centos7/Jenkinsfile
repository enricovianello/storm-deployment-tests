pipeline {

  agent {
    label 'deployment-test'
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  parameters {
    string(defaultValue: "stable", description: 'Which StoRM repositories have to be installed/enabled. Values: nightly beta and stable', name: 'STORM_TARGET_RELEASE')
    string(defaultValue: "stable", description: 'Which VOMS repositories have to be installed/enabled. Values: nightly beta and stable', name: 'VOMS_TARGET_RELEASE')
    string(defaultValue: "none", description: '', name: 'PKG_STORM_BRANCH')
    string(defaultValue: "none", description: '', name: 'PKG_VOMS_BRANCH')
  }

  environment {
    TTY_OPTS = "-T"
    STORM_TARGET_RELEASE = "${params.STORM_TARGET_RELEASE}"
    VOMS_TARGET_RELEASE = "${params.VOMS_TARGET_RELEASE}"
    PKG_STORM_BRANCH = "${params.PKG_STORM_BRANCH}"
    PKG_VOMS_BRANCH = "${params.PKG_VOMS_BRANCH}"
  }

  stages {
    stage('Run') {
      steps {
        script {
          echo "TTY_OPTS=${env.TTY_OPTS}"
          dir("all-in-one/centos7") {
            sh "bash ./run.sh"
          }
        }
      }
    }
  }
  post {
    always {
      archiveArtifacts 'all-in-one/centos7/output/**'
      step([$class: 'RobotPublisher',
        disableArchiveOutput: false,
        logFileName: 'log.html',
        otherFiles: '*.png',
        outputFileName: 'output.xml',
        outputPath: "all-in-one/centos7/output/reports",
        passThreshold: 100,
        reportFileName: 'report.html',
        unstableThreshold: 90])
    }
    failure {
      slackSend channel: '#ci-deployment-tests', color: 'danger', message: "${env.JOB_NAME} - #${env.BUILD_ID} Failure (<${env.BUILD_URL}|Open>)"
    }
    changed {
      script {
        if ('SUCCESS'.equals(currentBuild.result)) {
          slackSend channel: '#ci-deployment-tests', color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_ID} Back to normal (<${env.BUILD_URL}|Open>)"
        }
      }
    }
  }
}
